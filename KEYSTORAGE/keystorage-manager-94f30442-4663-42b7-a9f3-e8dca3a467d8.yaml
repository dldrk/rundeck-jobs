- defaultTab: nodes
  description: Exports/Imports/Migrates items from/to local/remote keystorage
  executionEnabled: true
  group: KEYSTORAGE
  id: 94f30442-4663-42b7-a9f3-e8dca3a467d8
  loglevel: INFO
  multipleExecutions: true
  name: keystorage-manager
  nodeFilterEditable: false
  options:
  - description: Usage mode
    enforced: true
    name: mode
    value: export
    values:
    - export
    - import
    - migrate
    valuesListDelimiter: ','
  - description: Rundeck API token
    name: rd-token
    required: true
    secure: true
    storagePath: keys/token.pwd
    valueExposed: true
  - description: Rundeck API token (import destination)
    name: rd-token-destination
    secure: true
    valueExposed: true
  - description: Rundeck URL destination to import keystorage
    name: rd-url-destination
  - description: Optional master password to encrypt keystorage items
    name: enc-password
    secure: true
    valueExposed: true
  - description: URI path. Append custom path if not root path
    name: key-path
    required: true
    value: keys
  - description: File to export/import items
    name: key-file
    required: true
    value: /tmp/keystorage.export
  - description: File to import items
    name: key-file-upload
    type: file
  plugins:
    ExecutionLifecycle: {}
  runnerSelector:
    runnerFilterType: LOCAL_RUNNER
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - description: export
      script: |+
        #!/bin/bash

        MODE="@option.mode@"
        RDURL="@job.serverUrl@"
        RDTOKEN="@option.rd-token@"
        ENCPASS="@option.enc-password@"
        KEYPATH="@option.key-path@"
        EXPORTPATH="@option.key-file@"
        JOBNAME="@job.name@"
        JOBGROUP="@job.group@"
        JOBPROJECT="@job.project@"
        JOBTEMP="/tmp/$JOBNAME.jobdef"
        UUID=`uuidgen`


        ## CHECKS
        [[ -f "`which jq`" ]] || (echo "$JOBNAME won't work. jq not installed" && exit 1)
        API="`curl -k -s -H Accept:application/json $RDURL/api | jq '.apiversion'`"
        [[ -z "$API" ]] && echo "Cannot connect or receive API version from $RDURL" && exit 1
        RDURL="$RDURL/api/$API"


        ## ENABLE/DISABLE ENCRYPTED ITEMS
        if [[ -n "$ENCPASS" ]]; then
          OUTPUTPASS="\`echo '\${option.item}' | openssl enc -aes-256-cbc -a -salt -pass pass:$ENCPASS 2> /dev/null | head -1\`"
        else
          OUTPUTPASS="\${option.item}"
        fi


        ## DEFINE TEMP JOB
        JOBSAMPLE="- defaultTab: output"
        JOBSAMPLE="$JOBSAMPLE\n  description: ''"
        JOBSAMPLE="$JOBSAMPLE\n  executionEnabled: true"
        JOBSAMPLE="$JOBSAMPLE\n  group: $JOBGROUP-temp"
        JOBSAMPLE="$JOBSAMPLE\n  id: $UUID"
        JOBSAMPLE="$JOBSAMPLE\n  loglevel: INFO"
        JOBSAMPLE="$JOBSAMPLE\n  multipleExecutions: true"
        JOBSAMPLE="$JOBSAMPLE\n  name: $JOBNAME-temp"
        JOBSAMPLE="$JOBSAMPLE\n  nodeFilterEditable: false"
        JOBSAMPLE="$JOBSAMPLE\n  options:"
        JOBSAMPLE="$JOBSAMPLE\n  - name: item"
        JOBSAMPLE="$JOBSAMPLE\n    secure: true"
        JOBSAMPLE="$JOBSAMPLE\n    storagePath: KEYITEM"
        JOBSAMPLE="$JOBSAMPLE\n    valueExposed: true"
        JOBSAMPLE="$JOBSAMPLE\n  plugins:"
        JOBSAMPLE="$JOBSAMPLE\n    ExecutionLifecycle: {}"
        JOBSAMPLE="$JOBSAMPLE\n  scheduleEnabled: true"
        JOBSAMPLE="$JOBSAMPLE\n  schedules: []"
        JOBSAMPLE="$JOBSAMPLE\n  sequence:"
        JOBSAMPLE="$JOBSAMPLE\n    commands:"
        JOBSAMPLE="$JOBSAMPLE\n    - exec: echo KEYITEM:$OUTPUTPASS >> $EXPORTPATH"
        JOBSAMPLE="$JOBSAMPLE\n    keepgoing: false"
        JOBSAMPLE="$JOBSAMPLE\n    strategy: node-first"
        JOBSAMPLE="$JOBSAMPLE\n  uuid: $UUID"


        # SET CONFIGS
        rm -f $EXPORTPATH || true
        touch $EXPORTPATH && chmod 600 $EXPORTPATH


        ## EXPORT ITEMS
        echo "Exporting items from key storage"

        GET-ITEMS() {
        KEY="$1"
        DATA=`curl -k -s -m 20 -X GET $RDURL/storage/$KEY -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json | jq '.resources[]' 2> /dev/null`
        if [[ -z "$DATA" ]]; then return ; fi
        ITEMS=`echo $DATA | jq -r '.type + ":" + .path' | sort`
        for item in `echo $ITEMS | tr ' ' '\n' | grep file`; do ITEMFILE="$ITEMFILE,$item" ; done
        for item in `echo $ITEMS | tr ' ' '\n' | grep directory`; do ITEMPATH="$ITEMPATH,$item" ; done
        }


        ## EDIT-IMPORT-RUN TEMP JOB
        GET-ITEMFILE() {
        STATUS="false"
        item="`echo $1 | cut -d ':' -f 2`"
        echo "Exporting $item"

        echo -e "$JOBSAMPLE" | sed "s:KEYITEM:$item:g" > $JOBTEMP
        curl -k -s -X POST $RDURL/project/$JOBPROJECT/jobs/import?dupeOption=update \
          -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json -H Content-Type:application/yaml \
          --data-binary @$JOBTEMP 2>&1 > /dev/null

        ID=`curl -k -s -X POST $RDURL/job/$UUID/run -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json | jq -r '.id'`
        while [[ $STATUS != "true" ]]; do
          sleep 5
          STATUS=`curl -k -s -X GET $RDURL/execution/$ID/state -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json | jq -r '.completed'`
        done
        }


        ## SEARCH ITEMS
        GET-ITEMPATH() {
        path="`echo $1 | cut -d ':' -f 2`"
        echo "Searching directory $path"
        GET-ITEMS $path
        }


        ## RUN EXPORT
        GET-ITEMS $KEYPATH
        while [[ $ITEMFILE != "" || $ITEMPATH != "" ]]; do
          for item in `echo $ITEMFILE | tr "," "\n"`; do
            ITEMFILE=`echo $ITEMFILE | sed "s;,$item;;g"`
            GET-ITEMFILE $item
          done
          for item in `echo $ITEMPATH | tr "," "\n"`; do
            ITEMPATH=`echo $ITEMPATH | sed "s;,$item;;g"`
            GET-ITEMPATH $item
          done
        done


        ## CLEAN UP
        curl -k -s -X DELETE $RDURL/job/$UUID/executions -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json > /dev/null \
          && sleep 5 \
          && curl -k -s -X DELETE $RDURL/job/$UUID -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json > /dev/null \
        rm -f $JOBTEMP 2> /dev/null || true

    - description: import
      script: |+
        #!/bin/bash

        MODE="@option.mode@"
        RDURL="@job.serverUrl@"
        RDTOKEN="@option.rd-token@"
        ENCPASS="@option.enc-password@"
        KEYPATH="@option.key-path@"
        IMPORTPATH="@option.key-file@"
        IMPORTUPLOAD="@file.key-file-upload@"


        ## CHECKS
        API="`curl -k -s -H Accept:application/json $RDURL/api | jq '.apiversion'`"
        [[ -z "$API" ]] && echo "Cannot connect or receive API version from $RDURL" && exit 1
        RDURL="$RDURL/api/$API"

        [[ -f $IMPORTPATH ]] && IMPORTITEMS="$IMPORTPATH"
        [[ -f $IMPORTUPLOAD ]] && IMPORTITEMS="$IMPORTUPLOAD"
        [[ ! -f $IMPORTITEMS ]] && echo "Import file not provided/found, or cannot be opened" && exit 1


        ## IMPORT ITEMS
        echo "Importing items to key storage"
        while read ksitem; do
          [[ "$ksitem" =~ "$KEYPATH" ]] || continue
          KEYNAME="`echo $ksitem | cut -d ':' -f 1`"
          KEYVALUE="`echo $ksitem | cut -d ':' -f 2`"

          if [[ -n "$ENCPASS" ]]; then
            KEYVALUE="`echo $KEYVALUE | openssl enc -d -aes-256-cbc -a -salt -pass pass:$ENCPASS 2> /dev/null | head -1`"
          fi

          if [[ -n "$KEYVALUE" ]] ; then
            echo "Importing $KEYNAME"
            STATUS="`curl -k -s -X POST $RDURL/storage/$KEYNAME -H X-Rundeck-Auth-Token:$RDTOKEN -H Content-Type:application/x-rundeck-data-password -d \"$KEYVALUE\"`"
            if [[ "$STATUS" =~ "error" ]]; then
              STATUS="`curl -k -s -X PUT $RDURL/storage/$KEYNAME -H X-Rundeck-Auth-Token:$RDTOKEN -H Content-Type:application/x-rundeck-data-password -d \"$KEYVALUE\"`"
            fi
          fi
        done <<< `cat $IMPORTITEMS`

    - description: migrate
      script: |+
        #!/bin/bash

        MODE="@option.mode@"
        RDURL="@job.serverUrl@"
        RDTOKEN="@option.rd-token@"
        RDURLDEST="@option.rd-url-destination@"
        RDTOKENDEST="@option.rd-token-destination@"
        ENCPASS="@option.enc-password@"
        KEYPATH="@option.key-path@"
        JOBNAME="@job.name@"
        JOBGROUP="@job.group@"
        JOBPROJECT="@job.project@"
        JOBTEMP="/tmp/$JOBNAME.jobdef"
        UUID=`uuidgen`


        ## CHECKS
        [[ -f "`which jq`" ]] || (echo "$JOBNAME won't work. jq not installed" && exit 1)
        API="`curl -k -s -H Accept:application/json $RDURL/api | jq '.apiversion'`"
        [[ -z "$API" ]] && echo "Cannot connect or receive API version from $RDURL" && exit 1
        RDURL="$RDURL/api/$API"
        RDURLDEST="$RDURLDEST/api/$API"


        ## DEFINE TEMP JOB
        JOBSAMPLE="- defaultTab: output"
        JOBSAMPLE="$JOBSAMPLE\n  description: ''"
        JOBSAMPLE="$JOBSAMPLE\n  executionEnabled: true"
        JOBSAMPLE="$JOBSAMPLE\n  group: $JOBGROUP-temp"
        JOBSAMPLE="$JOBSAMPLE\n  id: $UUID"
        JOBSAMPLE="$JOBSAMPLE\n  loglevel: INFO"
        JOBSAMPLE="$JOBSAMPLE\n  multipleExecutions: true"
        JOBSAMPLE="$JOBSAMPLE\n  name: $JOBNAME-temp"
        JOBSAMPLE="$JOBSAMPLE\n  nodeFilterEditable: false"
        JOBSAMPLE="$JOBSAMPLE\n  options:"
        JOBSAMPLE="$JOBSAMPLE\n  - name: item"
        JOBSAMPLE="$JOBSAMPLE\n    secure: true"
        JOBSAMPLE="$JOBSAMPLE\n    storagePath: KEYITEM"
        JOBSAMPLE="$JOBSAMPLE\n    valueExposed: true"
        JOBSAMPLE="$JOBSAMPLE\n  plugins:"
        JOBSAMPLE="$JOBSAMPLE\n    ExecutionLifecycle: {}"
        JOBSAMPLE="$JOBSAMPLE\n  scheduleEnabled: true"
        JOBSAMPLE="$JOBSAMPLE\n  schedules: []"
        JOBSAMPLE="$JOBSAMPLE\n  sequence:"
        JOBSAMPLE="$JOBSAMPLE\n    commands:"
        JOBSAMPLE="$JOBSAMPLE\n    - exec: curl -k -s -X POST $RDURLDEST/storage/KEYITEM -H X-Rundeck-Auth-Token:$RDTOKENDEST -H Content-Type:application/x-rundeck-data-password -d '\${option.item}'"
        JOBSAMPLE="$JOBSAMPLE\n    keepgoing: false"
        JOBSAMPLE="$JOBSAMPLE\n    strategy: node-first"
        JOBSAMPLE="$JOBSAMPLE\n  uuid: $UUID"


        # MIGRATE ITEMS
        echo "Migrating items from key storage to $RDURLDEST"
        for ksitem in `curl -k -s -X GET $RDURL/storage/$KEYPATH -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json | jq -r '.resources[].path' 2>/dev/null | sort` ; do
          echo -e "\nExporting $ksitem"
          echo -e "$JOBSAMPLE" | sed "s:KEYITEM:$ksitem:g" > $JOBTEMP
          curl -k -s -X POST $RDURL/project/$JOBPROJECT/jobs/import?dupeOption=update \
            -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json -H Content-Type:application/yaml --data-binary @$JOBTEMP
          curl -k -s -X POST $RDURL/job/$UUID/run -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json | jq '.href'
          sleep 3
        done


        # CLEAN UP
        curl -k -s -X DELETE $RDURL/job/$UUID/executions -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json
        curl -k -s -X DELETE $RDURL/job/$UUID -H X-Rundeck-Auth-Token:$RDTOKEN -H Accept:application/json
        rm -f $JOBTEMP 2> /dev/null || true

    keepgoing: false
    pluginConfig:
      LogFilter:
      - config:
          replacement: '[SECURE]'
        type: mask-passwords
      WorkflowStrategy:
        ruleset:
          rules: |-
            [export] if:option.mode==export
            [import] if:option.mode==import
            [migrate] if:option.mode==migrate
    strategy: ruleset
  tags: 'export,import,keystorage,manager,migrator'
  uuid: 94f30442-4663-42b7-a9f3-e8dca3a467d8

